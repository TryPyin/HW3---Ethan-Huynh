import math
import copy

def is_symmetric(A):
    """
    Check if a matrix is symmetric.

    Parameters:
    A (list of lists): Input matrix.

    Returns:
    bool: True if symmetric, False otherwise.
    """
    return all(len(row) == len(A) for row in A) and all(A[i][j] == A[j][i] for i in range(len(A)) for j in range(len(A[0])))

def is_positive_definite(A):
    """
    Check if a matrix is positive definite.

    Parameters:
    A (list of lists): Input matrix.

    Returns:
    bool: True if positive definite, False otherwise.
    """
    for i in range(len(A)):
        if math.isclose(A[i][i], 0) or A[i][i] <= 0:
            return False
    return True

def cholesky_decomposition(A):
    """
    Perform Cholesky decomposition to factorize A into LL^T.

    Parameters:
    A (list of lists): Symmetric, positive definite matrix.

    Returns:
    list of lists: Lower triangular matrix L.
    """
    n = len(A)
    L = [[0.0] * n for _ in range(n)]

    for i in range(n):
        for j in range(i + 1):
            if i == j:
                sigma = sum(L[i][k] ** 2 for k in range(j))
                L[i][j] = math.sqrt(A[i][i] - sigma)
            else:
                sigma = sum(L[i][k] * L[j][k] for k in range(j))
                L[i][j] = (A[i][j] - sigma) / L[j][j]

    return L

def forward_substitution(L, b):
    """
    Perform forward substitution to solve Ly = b.

    Parameters:
    L (list of lists): Lower triangular matrix.
    b (list): Right-hand side vector.

    Returns:
    list: Solution vector y.
    """
    n = len(L)
    y = [0.0] * n

    for i in range(n):
        y[i] = (b[i] - sum(L[i][k] * y[k] for k in range(i))) / L[i][i]

    return y

def backward_substitution(LT, y):
    """
    Perform backward substitution to solve L^Tx = y.

    Parameters:
    LT (list of lists): Transpose of the lower triangular matrix L.
    y (list): Result from forward substitution.

    Returns:
    list: Solution vector x.
    """
    n = len(LT)
    x = [0.0] * n

    for i in reversed(range(n)):
        x[i] = (y[i] - sum(LT[k][i] * x[k] for k in range(i + 1, n))) / LT[i][i]

    return x

def doolittle_lu_factorization(A):
    """
    Perform Doolittle LU factorization of matrix A.

    Parameters:
    A (list of lists): Input matrix.

    Returns:
    tuple: (L, U) - Lower and upper triangular matrices.
    """
    n = len(A)
    L = [[0.0] * n for _ in range(n)]
    U = copy.deepcopy(A)

    for i in range(n):
        L[i][i] = 1.0
        for j in range(i + 1, n):
            factor = U[j][i] / U[i][i]
            L[j][i] = factor
            for k in range(i, n):
                U[j][k] -= factor * U[i][k]

    return L, U

def solve_linear_equation_cholesky(A, b):
    """
    Solve the linear equation Ax = b using the Cholesky method.

    Parameters:
    A (list of lists): Symmetric, positive definite matrix.
    b (list): Right-hand side vector.

    Returns:
    list: Solution vector x.
    """
    L = cholesky_decomposition(A)
    y = forward_substitution(L, b)
    LT = list(map(list, zip(*L)))  # Transpose of L
    x = backward_substitution(LT, y)
    return x

def solve_linear_equation_doolittle(A, b):
    """
    Solve the linear equation Ax = b using the Doolittle method.

    Parameters:
    A (list of lists): Input matrix.
    b (list): Right-hand side vector.

    Returns:
    list: Solution vector x.
    """
    L, U = doolittle_lu_factorization(A)
    y = forward_substitution(L, b)
    x = backward_substitution(U, y)
    return x

def main():
    # Problem 1
    A1 = [[1, -1, -3, 2],
          [-1, 5, -5, -2],
          [3, -5, 19, 3],
          [2, -2, 3, 21]]
    b1 = [15, -35, 94, 1]

    if is_symmetric(A1) and is_positive_definite(A1):
        solution1 = solve_linear_equation_cholesky(A1, b1)
        print("Problem 1 - Cholesky Method:")
    else:
        solution1 = solve_linear_equation_doolittle(A1, b1)
        print("Problem 1 - Doolittle Method:")

    print("Solution vector:", solution1)
    print()

    # Problem 2
    A2 = [[4, 2, 4, 0],
          [2, 2, 3, 2],
          [4, 3, 6, 3],
          [0, 2, 3, 9]]
    b2 = [20, 36, 60, 122]

    if is_symmetric(A2) and is_positive_definite(A2):
        solution2 = solve_linear_equation_cholesky(A2, b2)
        print("Problem 2 - Cholesky Method:")
    else:
        solution2 = solve_linear_equation_doolittle(A2, b2)
        print("Problem 2 - Doolittle Method:")

    print("Solution vector:", solution2)

if __name__ == "__main__":
    main()
